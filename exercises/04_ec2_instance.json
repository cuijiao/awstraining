{
  "AWSTemplateFormatVersion" : "2010-09-09",
  "Description": "Template for training exercises",

  "Parameters": {
    "VpcID": {
      "Description": "VPC id in which to create the bastion host.",
      "Type": "String"
    },

    "MinSize": {
      "Description": "MinSize for the autoscale group",
      "Type": "Number",
      "Default": "1"
    },

    "MaxSize": {
      "Description": "MaxSize for the autoscale group",
      "Type": "Number",
      "Default": "1"
    },

    "PrivateSubnets": {
      "Description": "Subnets used in the autoscale group.",
      "Type": "CommaDelimitedList"
    },

    "KeyName": {
      "Description": "SSH Key to be used on the instance.",
      "Type": "String"
    }
  },

  "Mappings": {
    "AWSRegion2AMI": {
      "us-east-1": { "AMI": "ami-05355a6c" },
      "us-west-1": { "AMI": "ami-0358ce33" },
      "us-west-2": { "AMI": "ami-3ffed17a" },
      "eu-west-1": { "AMI": "ami-c7c0d6b3" },
      "sa-east-1": { "AMI": "ami-39b23d38" },
      "ap-southeast-1": { "AMI": "ami-39b23d38" },
      "ap-southeast-2": { "AMI": "ami-d16bfbeb" },
      "ap-northeast-1": { "AMI": "ami-39b23d38" }
    }
  },

  "Resources": {
    "PermitRules": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Allowing incoming ports.",
        "SecurityGroupIngress": [ {
          "CidrIp": "0.0.0.0/0",
          "IpProtocol": "tcp",
          "FromPort": "22",
          "ToPort": "22"
        },
        {
          "CidrIp": "0.0.0.0/0",
          "IpProtocol": "tcp",
          "FromPort": "80",
          "ToPort": "80"
        },
        {
          "CidrIp": "0.0.0.0/0",
          "IpProtocol": "icmp",
          "FromPort": "-1",
          "ToPort": "-1"
        } ],

        "VpcId": { "Ref": "VpcID" }
      }
    },

    "LaunchConf": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "config": {
            "packages": {
              "yum": { "nginx": [] }
            },

            "services": {
              "sysvinit": {
                "nginx": {
                  "enabled": "true",
                  "ensureRunning": "true"
                }
              }
            }
          }
        }
      },

      "Properties": {
        "ImageId": { "Fn::FindInMap": [ "AWSRegion2AMI", { "Ref": "AWS::Region" }, "AMI" ] },
        "InstanceType": "t1.micro",
        "KeyName": { "Ref": "KeyName" },
        "SecurityGroups": [ { "Ref": "PermitRules" } ],
        "UserData": { "Fn::Base64": { "Fn::Join": [ "", [
            "#!/bin/bash\n",
            "#########################################\n",
            "#########################################\n",
            "#########################################\n",
            "## CloudFormation Instances Bootstrap\n",
            "#########################################\n",

            "# Helper function\n",
            "function error_exit\n",
            "{\n",
            "  /opt/aws/bin/cfn-signal -e 1 -r \"$1\" '", { "Ref": "WaitHandle" }, "'\n",
            "  exit 1\n",
            "}\n",

            "yum -y update aws-cfn-bootstrap || error_exit \"ERROR: Could not update aws-cfn-bootstrap.\"\n",

            "/opt/aws/bin/cfn-init -v -s ", { "Ref": "AWS::StackName" }, " -r LaunchConf",
            "  --region ", { "Ref": "AWS::Region" }, " || error_exit 'Failed to run cfn-init'\n",

            "/opt/aws/bin/cfn-signal -e 0 -r 'Stack Complete.' '", { "Ref": "WaitHandle" }, "'\n"
            ]
          ] }
        }
      }
    },

    "ASGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "AvailabilityZones": { "Fn::GetAZs": "" },
        "VPCZoneIdentifier": { "Ref" : "PrivateSubnets" },
        "HealthCheckGracePeriod": 60,
        "HealthCheckType": "EC2",
        "LaunchConfigurationName": { "Ref" : "LaunchConf" },
        "MinSize": { "Ref": "MinSize" },
        "MaxSize": { "Ref": "MaxSize" },
        "DesiredCapacity": { "Ref": "MinSize" },
        "Tags": [
          {
            "Key": "Name",
            "Value": "training/demo_instance",
            "PropagateAtLaunch": true
          }
        ]
      }
    },

    "WaitHandle": {
      "Type": "AWS::CloudFormation::WaitConditionHandle"
    },

    "WaitCondition": {
      "Type": "AWS::CloudFormation::WaitCondition",
      "DependsOn": "ASGroup",
      "Properties": {
        "Count": { "Ref": "MinSize" },
        "Handle": { "Ref": "WaitHandle" },
        "Timeout": "300"
      }
    }
  }
}
