{
  "Description": "VPC for standalone app instances, no connectivity to a datacenter, and with NAT instances for outbound traffic to the internet, one in each AZ.", 
  "Parameters": {
    "KeyName": {
      "Description": "Key to be used on the NAT instances",
      "Type": "String",
      "Default": "nat-instances-key"
    },
    "InternalIpBase": {
      "Type": "String", 
      "Description": "The base CIDR block to use for the whole VPC", 
      "Default": "172.16.0.0/16", 
      "MinLength": "10", 
      "AllowedPattern": "^[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+/[0-9]+", 
      "MaxLength": "20", 
      "ConstraintDescription": "Must be valid CIDR notation eg 172.16.0.0/16"
    }, 
    "NATSubnetBCIDR": {
      "Type": "String", 
      "Description": "The CIDR block for the NAT subnet in AZ B", 
      "Default": "172.16.253.128/27", 
      "MinLength": "10", 
      "AllowedPattern": "^[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+/[0-9]+", 
      "MaxLength": "20", 
      "ConstraintDescription": "Must be valid CIDR notation eg 172.16.1.0/24"
    }, 
    "DNSDomain": {
      "Type": "String", 
      "Description": "The DNS domain that this VPC will host -- must already exist in Route53, and must end in realestate.com.au", 
      "MinLength": "10", 
      "AllowedPattern": "^[a-z][a-z0-9-.]+\\.realestate.com.au", 
      "MaxLength": "128", 
      "ConstraintDescription": "Must be a valid DNS domain name ending in realestate.com.au",
      "Default": "awstraining.realestate.com.au"
    }, 
    "PublicSubnetBCIDR": {
      "Type": "String", 
      "Description": "The CIDR block for the public subnet in AZ B", 
      "Default": "172.16.254.0/24", 
      "MinLength": "10", 
      "AllowedPattern": "^[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+/[0-9]+", 
      "MaxLength": "20", 
      "ConstraintDescription": "Must be valid CIDR notation eg 172.16.1.0/24"
    }, 
    "PrivateSubnetACIDR": {
      "Type": "String", 
      "Description": "The CIDR block for the private (app server) subnet in AZ A", 
      "Default": "172.16.4.0/22", 
      "MinLength": "10", 
      "AllowedPattern": "^[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+/[0-9]+", 
      "MaxLength": "20", 
      "ConstraintDescription": "Must be valid CIDR notation eg 172.16.1.0/24"
    }, 
    "ManagementSSHOrigin": {
      "Type": "String", 
      "Description": "The CIDR block from which management SSH connections will be permitted to NAT instances and bastion hosts", 
      "Default": "203.17.253.249/32", 
      "MinLength": "10", 
      "AllowedPattern": "^[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+/[0-9]+", 
      "MaxLength": "20", 
      "ConstraintDescription": "Must be valid CIDR notation eg 172.16.1.0/24"
    }, 
    "DNSSearchPath": {
      "MinLength": "10", 
      "ConstraintDescription": "One or more valid DNS subdomains (more than one becomes a search path)", 
      "Type": "String", 
      "Description": "The DNS search paths that instances in this VPC will use", 
      "MaxLength": "128",
      "Default": "awstraining.realestate.com.au"
    }, 
    "NATSubnetACIDR": {
      "Type": "String", 
      "Description": "The CIDR block for the NAT subnet in AZ A", 
      "Default": "172.16.253.0/27", 
      "MinLength": "10", 
      "AllowedPattern": "^[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+/[0-9]+", 
      "MaxLength": "20", 
      "ConstraintDescription": "Must be valid CIDR notation eg 172.16.1.0/24"
    }, 
    "PublicSubnetACIDR": {
      "Type": "String", 
      "Description": "The CIDR block for the public subnet in AZ A", 
      "Default": "172.16.255.0/24", 
      "MinLength": "10", 
      "AllowedPattern": "^[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+/[0-9]+", 
      "MaxLength": "20", 
      "ConstraintDescription": "Must be valid CIDR notation eg 172.16.255.0/24"
    }, 
    "PrivateSubnetBCIDR": {
      "Type": "String", 
      "Description": "The CIDR block for the private (app server) subnet in AZ B", 
      "Default": "172.16.8.0/22", 
      "MinLength": "10", 
      "AllowedPattern": "^[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+/[0-9]+", 
      "MaxLength": "20", 
      "ConstraintDescription": "Must be valid CIDR notation eg 172.16.1.0/24"
    }, 
    "DNSServers": {
      "Type": "CommaDelimitedList", 
      "Description": "A comma-separated list of IPs for the DNS servers to use",
      "Default": "8.8.8.8,8.8.4.4"
    }
  }, 
  "AWSTemplateFormatVersion": "2010-09-09", 

  "Outputs": {
    "PublicSubnetA": {
      "Value": {
        "Ref": "TrainingPublicSubnetA"
      }
    }, 
    "PublicSubnetB": {
      "Value": {
        "Ref": "TrainingPublicSubnetB"
      }
    }, 
    "VpcId": {
      "Value": {
        "Ref": "TrainingVPC"
      }
    }, 
    "PrivateSubnetA": {
      "Value": {
        "Ref": "TrainingPrivateSubnetA"
      }
    }, 
    "PrivateSubnetB": {
      "Value": {
        "Ref": "TrainingPrivateSubnetB"
      }
    }
  }, 
  "Resources": {
    "TrainingNATEIPAssociationA": {
      "Type": "AWS::EC2::EIPAssociation", 
      "Properties": {
        "NetworkInterfaceId": {
          "Ref": "TrainingNATENIA"
        }, 
        "AllocationId": {
          "Fn::GetAtt": [
            "TrainingNATEIPA", 
            "AllocationId"
          ]
        }
      }
    }, 
    "TrainingNATEIPAssociationB": {
      "Type": "AWS::EC2::EIPAssociation", 
      "Properties": {
        "NetworkInterfaceId": {
          "Ref": "TrainingNATENIB"
        }, 
        "AllocationId": {
          "Fn::GetAtt": [
            "TrainingNATEIPB", 
            "AllocationId"
          ]
        }
      }
    }, 
    "TrainingDHCPOptionsAssociation": {
      "Type": "AWS::EC2::VPCDHCPOptionsAssociation", 
      "Properties": {
        "VpcId": {
          "Ref": "TrainingVPC"
        }, 
        "DhcpOptionsId": {
          "Ref": "TrainingDHCPOptions"
        }
      }
    }, 
    "NATSubnetIngressPermitNTP": {
      "Type": "AWS::EC2::NetworkAclEntry", 
      "Properties": {
        "NetworkAclId": {
          "Ref": "NATSubnetACL"
        }, 
        "RuleNumber": 550, 
        "Protocol": 17, 
        "PortRange": {
          "To": 123, 
          "From": 123
        }, 
        "Egress": false, 
        "RuleAction": "allow", 
        "CidrBlock": "0.0.0.0/0"
      }
    }, 
    "TrainingNATEIPB": {
      "Type": "AWS::EC2::EIP", 
      "Properties": {
        "Domain": "vpc"
      }
    }, 
    "NATSubnetEgressPermitALL": {
      "Type": "AWS::EC2::NetworkAclEntry", 
      "Properties": {
        "NetworkAclId": {
          "Ref": "NATSubnetACL"
        }, 
        "RuleNumber": 100, 
        "Protocol": "-1", 
        "Egress": true, 
        "RuleAction": "allow", 
        "CidrBlock": "0.0.0.0/0"
      }
    }, 
    "TrainingPrivateSubnetBRouteTable": {
      "Type": "AWS::EC2::RouteTable", 
      "Properties": {
        "VpcId": {
          "Ref": "TrainingVPC"
        }, 
        "Tags": [
          {
            "Value": "NAT gateway route table from private subnet B", 
            "Key": "Name"
          }
        ]
      }
    }, 
    "TrainingNATInstanceA": {
      "Type": "AWS::EC2::Instance", 
      "Properties": {
        "SourceDestCheck": false, 
        "Tags": [
          {
            "Value": {
              "Fn::Join": [
                " ", 
                [
                  "VPC NAT A", 
                  {
                    "Ref": "AWS::StackName"
                  }
                ]
              ]
            }, 
            "Key": "Name"
          }
        ], 
        "ImageId": {
          "Fn::FindInMap": [
            "AWSRegionToNATAMI", 
            {
              "Ref": "AWS::Region"
            }, 
            "64"
          ]
        }, 
        "KeyName": { "Ref": "KeyName" },
        "InstanceType": "c1.medium", 
        "NetworkInterfaces": [
          {
            "DeviceIndex": "0", 
            "NetworkInterfaceId": {
              "Ref": "TrainingNATENIA"
            }
          }
        ]
      }
    }, 
    "NATSubnetIngressPermitEphemeralTCP": {
      "Type": "AWS::EC2::NetworkAclEntry", 
      "Properties": {
        "NetworkAclId": {
          "Ref": "NATSubnetACL"
        }, 
        "RuleNumber": 500, 
        "Protocol": 6, 
        "PortRange": {
          "To": 61000, 
          "From": 32768
        }, 
        "Egress": false, 
        "RuleAction": "allow", 
        "CidrBlock": "0.0.0.0/0"
      }
    }, 
    "TrainingPrivateSubnetA": {
      "Type": "AWS::EC2::Subnet", 
      "Properties": {
        "VpcId": {
          "Ref": "TrainingVPC"
        }, 
        "AvailabilityZone": {
          "Fn::Select": [
            "0", 
            {
              "Fn::GetAZs": {
                "Ref": "AWS::Region"
              }
            }
          ]
        }, 
        "CidrBlock": {
          "Ref": "PrivateSubnetACIDR"
        }, 
        "Tags": [
          {
            "Value": "Training private subnet in AZ A", 
            "Key": "Name"
          }
        ]
      }
    }, 
    "TrainingPrivateSubnetB": {
      "Type": "AWS::EC2::Subnet", 
      "Properties": {
        "VpcId": {
          "Ref": "TrainingVPC"
        }, 
        "AvailabilityZone": {
          "Fn::Select": [
            "1", 
            {
              "Fn::GetAZs": {
                "Ref": "AWS::Region"
              }
            }
          ]
        }, 
        "CidrBlock": {
          "Ref": "PrivateSubnetBCIDR"
        }, 
        "Tags": [
          {
            "Value": "Training private subnet in AZ B", 
            "Key": "Name"
          }
        ]
      }
    }, 
    "TrainingPublicRoute": {
      "Type": "AWS::EC2::Route", 
      "Properties": {
        "GatewayId": {
          "Ref": "TrainingInternetGateway"
        }, 
        "DestinationCidrBlock": "0.0.0.0/0", 
        "RouteTableId": {
          "Ref": "TrainingPublicSubnetRouteTable"
        }
      }
    }, 
    "TrainingNetworkAclPublicIngressPort443": {
      "Type": "AWS::EC2::NetworkAclEntry", 
      "Properties": {
        "NetworkAclId": {
          "Ref": "TrainingNetworkACL"
        }, 
        "RuleNumber": 110, 
        "Protocol": 6, 
        "PortRange": {
          "To": 443, 
          "From": 443
        }, 
        "Egress": false, 
        "RuleAction": "allow", 
        "CidrBlock": "0.0.0.0/0"
      }
    }, 
    "TrainingNetworkAclAssocPubB": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation", 
      "Properties": {
        "SubnetId": {
          "Ref": "TrainingPublicSubnetB"
        }, 
        "NetworkAclId": {
          "Ref": "TrainingNetworkACL"
        }
      }
    }, 
    "TrainingNetworkAclPublicIngressAllInternal": {
      "Type": "AWS::EC2::NetworkAclEntry", 
      "Properties": {
        "NetworkAclId": {
          "Ref": "TrainingNetworkACL"
        }, 
        "RuleNumber": 160, 
        "Protocol": "-1", 
        "PortRange": {
          "To": 65535, 
          "From": 0
        }, 
        "Egress": false, 
        "RuleAction": "allow", 
        "CidrBlock": {
          "Ref": "InternalIpBase"
        }
      }
    }, 
    "TrainingRouteAssociationPublicBDefault": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation", 
      "Properties": {
        "SubnetId": {
          "Ref": "TrainingPublicSubnetB"
        }, 
        "RouteTableId": {
          "Ref": "TrainingPublicSubnetRouteTable"
        }
      }
    }, 
    "NATSubnetIngressPermitVPCOutbound": {
      "Type": "AWS::EC2::NetworkAclEntry", 
      "Properties": {
        "NetworkAclId": {
          "Ref": "NATSubnetACL"
        }, 
        "RuleNumber": 540, 
        "Protocol": -1, 
        "Egress": false, 
        "RuleAction": "allow", 
        "CidrBlock": {
          "Ref": "InternalIpBase"
        }
      }
    }, 
    "TrainingNATEIPA": {
      "Type": "AWS::EC2::EIP", 
      "Properties": {
        "Domain": "vpc"
      }
    }, 
    "NATSubnetACL": {
      "Type": "AWS::EC2::NetworkAcl", 
      "Properties": {
        "VpcId": {
          "Ref": "TrainingVPC"
        }, 
        "Tags": [
          {
            "Value": "Network ACL for NAT subnet", 
            "Key": "Name"
          }
        ]
      }
    }, 
    "TrainingNATInstanceB": {
      "Type": "AWS::EC2::Instance", 
      "Properties": {
        "SourceDestCheck": false, 
        "Tags": [
          {
            "Value": {
              "Fn::Join": [
                " ", 
                [
                  "VPC NAT B", 
                  {
                    "Ref": "AWS::StackName"
                  }
                ]
              ]
            }, 
            "Key": "Name"
          }
        ], 
        "ImageId": {
          "Fn::FindInMap": [
            "AWSRegionToNATAMI", 
            {
              "Ref": "AWS::Region"
            }, 
            "64"
          ]
        }, 
        "KeyName": { "Ref": "KeyName" }, 
        "InstanceType": "c1.medium", 
        "NetworkInterfaces": [
          {
            "DeviceIndex": "0", 
            "NetworkInterfaceId": {
              "Ref": "TrainingNATENIB"
            }
          }
        ]
      }
    }, 
    "TrainingPublicSubnetRouteTable": {
      "Type": "AWS::EC2::RouteTable", 
      "Properties": {
        "VpcId": {
          "Ref": "TrainingVPC"
        }, 
        "Tags": [
          {
            "Value": "Internet Gateway Route Table from Public subnets", 
            "Key": "Name"
          }
        ]
      }
    }, 
    "NTPnear1DNSRECORD": {
      "Type": "AWS::Route53::RecordSet", 
      "Properties": {
        "Comment": "ntp1.near CNAME pointer to an NTP pool server", 
        "Name": {
          "Fn::Join": [
            "", 
            [
              "ntp1.near", 
              ".", 
              {
                "Ref": "DNSDomain"
              }, 
              "."
            ]
          ]
        }, 
        "HostedZoneName": {
          "Fn::Join": [
            "", 
            [
              {
                "Ref": "DNSDomain"
              }, 
              "."
            ]
          ]
        }, 
        "ResourceRecords": [
          "0.amazon.pool.ntp.org"
        ], 
        "TTL": "300", 
        "Type": "CNAME"
      }
    }, 
    "TrainingNATENIA": {
      "Type": "AWS::EC2::NetworkInterface", 
      "Properties": {
        "SubnetId": {
          "Ref": "TrainingNATSubnetA"
        }, 
        "GroupSet": [
          {
            "Ref": "TrainingNATSecurityGroup"
          }
        ]
      }
    }, 
    "TrainingNATENIB": {
      "Type": "AWS::EC2::NetworkInterface", 
      "Properties": {
        "SubnetId": {
          "Ref": "TrainingNATSubnetB"
        }, 
        "GroupSet": [
          {
            "Ref": "TrainingNATSecurityGroup"
          }
        ]
      }
    }, 
    "NATSubnetBNetACLAssoc": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation", 
      "Properties": {
        "SubnetId": {
          "Ref": "TrainingNATSubnetB"
        }, 
        "NetworkAclId": {
          "Ref": "NATSubnetACL"
        }
      }
    }, 
    "NATSubnetIngressPermitEphemeralUDP": {
      "Type": "AWS::EC2::NetworkAclEntry", 
      "Properties": {
        "NetworkAclId": {
          "Ref": "NATSubnetACL"
        }, 
        "RuleNumber": 510, 
        "Protocol": 17, 
        "PortRange": {
          "To": 61000, 
          "From": 32768
        }, 
        "Egress": false, 
        "RuleAction": "allow", 
        "CidrBlock": "0.0.0.0/0"
      }
    }, 
    "NATSubnetIngressPermitICMP": {
      "Type": "AWS::EC2::NetworkAclEntry", 
      "Properties": {
        "NetworkAclId": {
          "Ref": "NATSubnetACL"
        }, 
        "RuleNumber": 520, 
        "Protocol": 1, 
        "Egress": false, 
        "RuleAction": "allow", 
        "Icmp": {
          "Code": "-1", 
          "Type": "-1"
        }, 
        "CidrBlock": "0.0.0.0/0"
      }
    }, 
    "TrainingNATSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup", 
      "Properties": {
        "SecurityGroupIngress": [
          {
            "ToPort": "80", 
            "IpProtocol": "tcp", 
            "CidrIp": {
              "Ref": "InternalIpBase"
            }, 
            "FromPort": "80"
          }, 
          {
            "ToPort": "443", 
            "IpProtocol": "tcp", 
            "CidrIp": {
              "Ref": "InternalIpBase"
            }, 
            "FromPort": "443"
          }, 
          {
            "ToPort": "22", 
            "IpProtocol": "tcp", 
            "CidrIp": {
              "Ref": "ManagementSSHOrigin"
            }, 
            "FromPort": "22"
          }, 
          {
            "ToPort": "53", 
            "IpProtocol": "udp", 
            "CidrIp": {
              "Ref": "InternalIpBase"
            }, 
            "FromPort": "53"
          }, 
          {
            "ToPort": "123", 
            "IpProtocol": "udp", 
            "CidrIp": "0.0.0.0/0", 
            "FromPort": "123"
          }, 
          {
            "ToPort": "-1", 
            "IpProtocol": "icmp", 
            "CidrIp": "0.0.0.0/0", 
            "FromPort": "-1"
          }
        ], 
        "VpcId": {
          "Ref": "TrainingVPC"
        }, 
        "GroupDescription": "Allow outbound NAT from boxes inside the VPC", 
        "SecurityGroupEgress": [
          {
            "ToPort": "80", 
            "IpProtocol": "tcp", 
            "CidrIp": "0.0.0.0/0", 
            "FromPort": "80"
          }, 
          {
            "ToPort": "443", 
            "IpProtocol": "tcp", 
            "CidrIp": "0.0.0.0/0", 
            "FromPort": "443"
          }, 
          {
            "ToPort": "53", 
            "IpProtocol": "udp", 
            "CidrIp": "0.0.0.0/0", 
            "FromPort": "53"
          }, 
          {
            "ToPort": "123", 
            "IpProtocol": "udp", 
            "CidrIp": "0.0.0.0/0", 
            "FromPort": "123"
          }, 
          {
            "ToPort": "-1", 
            "IpProtocol": "icmp", 
            "CidrIp": "0.0.0.0/0", 
            "FromPort": "-1"
          }
        ]
      }
    }, 
    "TrainingNetworkAclPublicIngressICMP": {
      "Type": "AWS::EC2::NetworkAclEntry", 
      "Properties": {
        "NetworkAclId": {
          "Ref": "TrainingNetworkACL"
        }, 
        "RuleNumber": 150, 
        "Protocol": 1, 
        "Egress": false, 
        "RuleAction": "allow", 
        "Icmp": {
          "Code": "-1", 
          "Type": "-1"
        }, 
        "CidrBlock": "0.0.0.0/0"
      }
    }, 
    "NATSubnetANetACLAssoc": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation", 
      "Properties": {
        "SubnetId": {
          "Ref": "TrainingNATSubnetA"
        }, 
        "NetworkAclId": {
          "Ref": "NATSubnetACL"
        }
      }
    }, 
    "TrainingDHCPOptions": {
      "Type": "AWS::EC2::DHCPOptions", 
      "Properties": {
        "Tags": [
          {
            "Value": {
              "Fn::Join": [
                " ", 
                [
                  "VPC NAT DHCP ", 
                  {
                    "Ref": "AWS::StackName"
                  }
                ]
              ]
            }, 
            "Key": "Name"
          }, 
          {
            "Value": "Provides a DNS domain path and set of Route-53 hosted nameservers to answer for it", 
            "Key": "Description"
          }
        ], 
        "DomainNameServers": {
          "Ref": "DNSServers"
        }, 
        "DomainName": {
          "Ref": "DNSSearchPath"
        }
      }
    }, 
    "TrainingNetworkACL": {
      "Type": "AWS::EC2::NetworkAcl", 
      "Properties": {
        "VpcId": {
          "Ref": "TrainingVPC"
        }, 
        "Tags": [
          {
            "Value": "Training Network ACL for a VPC", 
            "Key": "Name"
          }
        ]
      }
    }, 
    "NTPnear2DNSRECORD": {
      "Type": "AWS::Route53::RecordSet", 
      "Properties": {
        "Comment": "ntp2.near CNAME pointer to an NTP pool server", 
        "Name": {
          "Fn::Join": [
            "", 
            [
              "ntp2.near", 
              ".", 
              {
                "Ref": "DNSDomain"
              }, 
              "."
            ]
          ]
        }, 
        "HostedZoneName": {
          "Fn::Join": [
            "", 
            [
              {
                "Ref": "DNSDomain"
              }, 
              "."
            ]
          ]
        }, 
        "ResourceRecords": [
          "1.amazon.pool.ntp.org"
        ], 
        "TTL": "300", 
        "Type": "CNAME"
      }
    }, 
    "TrainingPrivateSubnetARouteTable": {
      "Type": "AWS::EC2::RouteTable", 
      "Properties": {
        "VpcId": {
          "Ref": "TrainingVPC"
        }, 
        "Tags": [
          {
            "Value": "NAT gateway route table from private subnet A", 
            "Key": "Name"
          }
        ]
      }
    }, 
    "TrainingNetworkAclPublicEphemeralTCPReply": {
      "Type": "AWS::EC2::NetworkAclEntry", 
      "Properties": {
        "NetworkAclId": {
          "Ref": "TrainingNetworkACL"
        }, 
        "RuleNumber": 170, 
        "Protocol": 6, 
        "PortRange": {
          "To": 61000, 
          "From": 32768
        }, 
        "Egress": false, 
        "RuleAction": "allow", 
        "CidrBlock": "0.0.0.0/0"
      }
    }, 
    "TrainingRouteAssociationPublicADefault": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation", 
      "Properties": {
        "SubnetId": {
          "Ref": "TrainingPublicSubnetA"
        }, 
        "RouteTableId": {
          "Ref": "TrainingPublicSubnetRouteTable"
        }
      }
    }, 
    "TrainingNetworkAclPublicEphemeralUDPReply": {
      "Type": "AWS::EC2::NetworkAclEntry", 
      "Properties": {
        "NetworkAclId": {
          "Ref": "TrainingNetworkACL"
        }, 
        "RuleNumber": 180, 
        "Protocol": 17, 
        "PortRange": {
          "To": 61000, 
          "From": 32768
        }, 
        "Egress": false, 
        "RuleAction": "allow", 
        "CidrBlock": "0.0.0.0/0"
      }
    }, 
    "TrainingIGWAttachment": {
      "Type": "AWS::EC2::VPCGatewayAttachment", 
      "Properties": {
        "VpcId": {
          "Ref": "TrainingVPC"
        }, 
        "InternetGatewayId": {
          "Ref": "TrainingInternetGateway"
        }
      }
    }, 
    "TrainingNetworkAclPublicEgress": {
      "Type": "AWS::EC2::NetworkAclEntry", 
      "Properties": {
        "NetworkAclId": {
          "Ref": "TrainingNetworkACL"
        }, 
        "RuleNumber": 100, 
        "Protocol": "-1", 
        "PortRange": {
          "To": 65535, 
          "From": 0
        }, 
        "Egress": true, 
        "RuleAction": "allow", 
        "CidrBlock": "0.0.0.0/0"
      }
    }, 
    "TrainingRouteAssociationNATADefault": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation", 
      "Properties": {
        "SubnetId": {
          "Ref": "TrainingNATSubnetA"
        }, 
        "RouteTableId": {
          "Ref": "TrainingPublicSubnetRouteTable"
        }
      }
    }, 
    "TrainingNATADNSARecord": {
      "Type": "AWS::Route53::RecordSet", 
      "Properties": {
        "Comment": "NAT Instance in First AZ", 
        "Name": {
          "Fn::Join": [
            "", 
            [
              "nat-a", 
              ".", 
              {
                "Ref": "DNSDomain"
              }, 
              "."
            ]
          ]
        }, 
        "HostedZoneName": {
          "Fn::Join": [
            "", 
            [
              {
                "Ref": "DNSDomain"
              }, 
              "."
            ]
          ]
        }, 
        "ResourceRecords": [
          {
            "Fn::GetAtt": [
              "TrainingNATInstanceA", 
              "PrivateIp"
            ]
          }
        ], 
        "TTL": "300", 
        "Type": "A"
      }
    }, 
    "TrainingPrivateRouteA": {
      "Type": "AWS::EC2::Route", 
      "Properties": {
        "InstanceId": {
          "Ref": "TrainingNATInstanceA"
        }, 
        "DestinationCidrBlock": "0.0.0.0/0", 
        "RouteTableId": {
          "Ref": "TrainingPrivateSubnetARouteTable"
        }
      }
    }, 
    "TrainingInternetGateway": {
      "Type": "AWS::EC2::InternetGateway", 
      "Properties": {
        "Tags": [
          {
            "Value": "Training VPC Internet Gateway", 
            "Key": "Name"
          }
        ]
      }
    }, 
    "TrainingRouteAssociationPrivateBDefault": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation", 
      "Properties": {
        "SubnetId": {
          "Ref": "TrainingPrivateSubnetB"
        }, 
        "RouteTableId": {
          "Ref": "TrainingPrivateSubnetBRouteTable"
        }
      }
    }, 
    "TrainingPublicSubnetA": {
      "Type": "AWS::EC2::Subnet", 
      "Properties": {
        "VpcId": {
          "Ref": "TrainingVPC"
        }, 
        "AvailabilityZone": {
          "Fn::Select": [
            "0", 
            {
              "Fn::GetAZs": {
                "Ref": "AWS::Region"
              }
            }
          ]
        }, 
        "CidrBlock": {
          "Ref": "PublicSubnetACIDR"
        }, 
        "Tags": [
          {
            "Value": "Training public subnet in AZ A", 
            "Key": "Name"
          }
        ]
      }
    }, 
    "TrainingNATBDNSARecord": {
      "Type": "AWS::Route53::RecordSet", 
      "Properties": {
        "Comment": "NAT Instance in AZ A", 
        "Name": {
          "Fn::Join": [
            "", 
            [
              "nat-b", 
              ".", 
              {
                "Ref": "DNSDomain"
              }, 
              "."
            ]
          ]
        }, 
        "HostedZoneName": {
          "Fn::Join": [
            "", 
            [
              {
                "Ref": "DNSDomain"
              }, 
              "."
            ]
          ]
        }, 
        "ResourceRecords": [
          {
            "Fn::GetAtt": [
              "TrainingNATInstanceB", 
              "PrivateIp"
            ]
          }
        ], 
        "TTL": "300", 
        "Type": "A"
      }
    }, 
    "TrainingPublicSubnetB": {
      "Type": "AWS::EC2::Subnet", 
      "Properties": {
        "VpcId": {
          "Ref": "TrainingVPC"
        }, 
        "AvailabilityZone": {
          "Fn::Select": [
            "1", 
            {
              "Fn::GetAZs": {
                "Ref": "AWS::Region"
              }
            }
          ]
        }, 
        "CidrBlock": {
          "Ref": "PublicSubnetBCIDR"
        }, 
        "Tags": [
          {
            "Value": "Training public subnet in AZ B", 
            "Key": "Name"
          }
        ]
      }
    }, 
    "TrainingVPC": {
      "Type": "AWS::EC2::VPC", 
      "Properties": {
        "InstanceTenancy": "default", 
        "CidrBlock": {
          "Ref": "InternalIpBase"
        }
      }
    }, 
    "TrainingRouteAssociationNATBDefault": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation", 
      "Properties": {
        "SubnetId": {
          "Ref": "TrainingNATSubnetB"
        }, 
        "RouteTableId": {
          "Ref": "TrainingPublicSubnetRouteTable"
        }
      }
    }, 
    "NATSubnetIngressPermitMgmtSSH": {
      "Type": "AWS::EC2::NetworkAclEntry", 
      "Properties": {
        "NetworkAclId": {
          "Ref": "NATSubnetACL"
        }, 
        "RuleNumber": 530, 
        "Protocol": 6, 
        "PortRange": {
          "To": 22, 
          "From": 22
        }, 
        "Egress": false, 
        "RuleAction": "allow", 
        "CidrBlock": {
          "Ref": "ManagementSSHOrigin"
        }
      }
    }, 
    "TrainingNetworkAclAssocPubA": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation", 
      "Properties": {
        "SubnetId": {
          "Ref": "TrainingPublicSubnetA"
        }, 
        "NetworkAclId": {
          "Ref": "TrainingNetworkACL"
        }
      }
    }, 
    "TrainingNetworkAclPublicIngressPort22": {
      "Type": "AWS::EC2::NetworkAclEntry", 
      "Properties": {
        "NetworkAclId": {
          "Ref": "TrainingNetworkACL"
        }, 
        "RuleNumber": 120, 
        "Protocol": 6, 
        "PortRange": {
          "To": 22, 
          "From": 22
        }, 
        "Egress": false, 
        "RuleAction": "allow", 
        "CidrBlock": {
          "Ref": "ManagementSSHOrigin"
        }
      }
    }, 
    "TrainingPrivateRouteB": {
      "Type": "AWS::EC2::Route", 
      "Properties": {
        "InstanceId": {
          "Ref": "TrainingNATInstanceB"
        }, 
        "DestinationCidrBlock": "0.0.0.0/0", 
        "RouteTableId": {
          "Ref": "TrainingPrivateSubnetBRouteTable"
        }
      }
    }, 
    "TrainingNATSubnetA": {
      "Type": "AWS::EC2::Subnet", 
      "Properties": {
        "VpcId": {
          "Ref": "TrainingVPC"
        }, 
        "AvailabilityZone": {
          "Fn::Select": [
            "0", 
            {
              "Fn::GetAZs": {
                "Ref": "AWS::Region"
              }
            }
          ]
        }, 
        "CidrBlock": {
          "Ref": "NATSubnetACIDR"
        }, 
        "Tags": [
          {
            "Value": "Training NAT subnet in AZ A", 
            "Key": "Name"
          }
        ]
      }
    }, 
    "TrainingNATSubnetB": {
      "Type": "AWS::EC2::Subnet", 
      "Properties": {
        "VpcId": {
          "Ref": "TrainingVPC"
        }, 
        "AvailabilityZone": {
          "Fn::Select": [
            "1", 
            {
              "Fn::GetAZs": {
                "Ref": "AWS::Region"
              }
            }
          ]
        }, 
        "CidrBlock": {
          "Ref": "NATSubnetBCIDR"
        }, 
        "Tags": [
          {
            "Value": "Training NAT subnet in AZ B", 
            "Key": "Name"
          }
        ]
      }
    }, 
    "TrainingRouteAssociationPrivateADefault": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation", 
      "Properties": {
        "SubnetId": {
          "Ref": "TrainingPrivateSubnetA"
        }, 
        "RouteTableId": {
          "Ref": "TrainingPrivateSubnetARouteTable"
        }
      }
    }, 
    "NTPfar1DNSRECORD": {
      "Type": "AWS::Route53::RecordSet", 
      "Properties": {
        "Comment": "ntp1.far CNAME pointer to an NTP pool server", 
        "Name": {
          "Fn::Join": [
            "", 
            [
              "ntp1.far", 
              ".", 
              {
                "Ref": "DNSDomain"
              }, 
              "."
            ]
          ]
        }, 
        "HostedZoneName": {
          "Fn::Join": [
            "", 
            [
              {
                "Ref": "DNSDomain"
              }, 
              "."
            ]
          ]
        }, 
        "ResourceRecords": [
          "2.amazon.pool.ntp.org"
        ], 
        "TTL": "300", 
        "Type": "CNAME"
      }
    }, 
    "TrainingNetworkAclPublicIngressPort80": {
      "Type": "AWS::EC2::NetworkAclEntry", 
      "Properties": {
        "NetworkAclId": {
          "Ref": "TrainingNetworkACL"
        }, 
        "RuleNumber": 100, 
        "Protocol": 6, 
        "PortRange": {
          "To": 80, 
          "From": 80
        }, 
        "Egress": false, 
        "RuleAction": "allow", 
        "CidrBlock": "0.0.0.0/0"
      }
    }
  }, 
  "Mappings": {
    "AWSRegionToNATAMI": {
      "us-east-1": {
        "32": "ami-2e1bc047", 
        "64": "ami-f619c29f"
      }, 
      "ap-northeast-1": {
        "32": "ami-12d86d13", 
        "64": "ami-14d86d15"
      }, 
      "sa-east-1": {
        "32": "ami-0439e619", 
        "64": "ami-0039e61d"
      }, 
      "ap-southeast-1": {
        "32": "ami-00eb9352", 
        "64": "ami-02eb9350"
      }, 
      "ap-southeast-2": {
        "32": "ami-a1980f9b", 
        "64": "ami-ab990e91"
      }, 
      "us-west-2": {
        "32": "ami-6eff725e", 
        "64": "ami-52ff7262"
      }, 
      "us-west-1": {
        "32": "ami-c7cc9e82", 
        "64": "ami-3bcc9e7e"
      }, 
      "eu-west-1": {
        "32": "ami-1de2d969", 
        "64": "ami-e5e2d991"
      }
    }
  }
}
